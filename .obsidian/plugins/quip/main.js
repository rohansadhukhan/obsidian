/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuipPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian8 = require("obsidian");

// src/quipapi.ts
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  hostname: "platform.quip.com",
  token: "",
  removeYAML: true,
  addLink: true,
  inlineEmbeds: true,
  prependTitle: false
};
var QuipSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quip API settings" });
    new import_obsidian.Setting(containerEl).setName("Personal API Token").setDesc("Obtained from /dev/token on your Quip website").addText((text) => text.setValue(this.plugin.settings.token).onChange(async (value) => {
      this.plugin.settings.token = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API hostname").setDesc("Endpoint for calls to the Quip automation API").addText((text) => text.setPlaceholder("platform.quip.com").setValue(this.plugin.settings.hostname).onChange(async (value) => {
      this.plugin.settings.hostname = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Publishing to Quip" });
    new import_obsidian.Setting(containerEl).setName("Remove YAML front matter").setDesc("Strip leading YAML out of notes before sending to Quip").addToggle((toggle) => toggle.setValue(this.plugin.settings.removeYAML).onChange(async (value) => {
      this.plugin.settings.removeYAML = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Add Quip link").setDesc("Insert a link to the published Quip document into YAML front matter").addToggle((toggle) => toggle.setValue(this.plugin.settings.addLink).onChange(async (value) => {
      this.plugin.settings.addLink = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Inline embedded notes").setDesc("Replace embed-links with the content of those notes").addToggle((toggle) => toggle.setValue(this.plugin.settings.inlineEmbeds).onChange(async (value) => {
      this.plugin.settings.inlineEmbeds = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Document title").setDesc("Add Note name as Quip Document title").addToggle((toggle) => toggle.setValue(this.plugin.settings.prependTitle).onChange(async (value) => {
      this.plugin.settings.prependTitle = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("em", {
      text: "Note that Quip does not expose any API to update a title of an existing document, so renaming a note will NOT change the document title in Quip."
    });
  }
};

// src/quipapi.ts
var QuipAPIClient = class {
  constructor(hostname, token) {
    this.accessToken = token;
    this.hostname = hostname;
    if (token === DEFAULT_SETTINGS.token) {
      throw new Error("Quip API token has not been set");
    } else if (hostname == DEFAULT_SETTINGS.hostname) {
      throw new Error("Quip API hostname has not been set");
    }
  }
  async newHTMLDocument(html, title) {
    const options = {
      content: html,
      format: "html" /* HTML */
    };
    if (title) {
      options.title = title;
    }
    return this.newDocument(options);
  }
  async getDocumentHTML(threadIdOrSecretPath) {
    var _a;
    let result = "";
    const options = {
      threadIdOrSecretPath
    };
    do {
      const response = await this.getThreadHTML(options);
      result += response.html;
      options.cursor = (_a = response.response_metadata) == null ? void 0 : _a.next_cursor;
    } while (options.cursor);
    return result;
  }
  async updateHTMLDocument(link, html) {
    const secret_path = link.split(".com/", 2).at(1).split("/").at(0);
    const marker = "QUIP-OBSIDIAN-DELETE-MARKER-" + Date.now();
    const prepend_html = `${html}
        <h1>${marker}</h1>
        <p><em>Everything after the <strong>${marker}</strong> h1 should be deleted shortly. Due to Quip limitations, we need to delete each h1 header separately.</em></p>`;
    const current_html = (await this.prependHTML(secret_path, prepend_html)).html;
    const dom = (0, import_obsidian2.sanitizeHTMLToDom)(current_html);
    const promises = [];
    let marker_found = false;
    const section_headers = dom.querySelectorAll("h1");
    for (const section_header of Array.from(section_headers)) {
      if (section_header.getText() == marker) {
        marker_found = true;
        console.debug(`Found deletion marker: ${section_header.getText()}`);
      } else if (marker_found) {
        console.debug(`Deleting h1 header: ${section_header.getText()}`);
        promises.push(this.deleteSection(secret_path, section_header.getAttr("id")));
      }
    }
    const responses = await Promise.all(promises);
    responses.push(await this.deleteDocumentRange(secret_path, marker));
    return Promise.resolve(responses);
  }
  async getThreadHTML(options) {
    let url = `/2/threads/${options.threadIdOrSecretPath}/html`;
    if (options.cursor) {
      url += `?cursor=${options.cursor}`;
    }
    return this.api(url, null);
  }
  async appendHTML(secret_path, html) {
    const options = {
      thread_id: secret_path,
      location: "0" /* APPEND */,
      content: html
    };
    return this.editDocument(options);
  }
  async prependHTML(secret_path, html) {
    const options = {
      thread_id: secret_path,
      location: "1" /* PREPEND */,
      content: html
    };
    return this.editDocument(options);
  }
  async deleteDocumentRange(secret_path, document_range) {
    const options = {
      thread_id: secret_path,
      location: "9" /* DELETE_DOCUMENT_RANGE */,
      document_range
    };
    return this.editDocument(options);
  }
  async deleteSection(secret_path, section_id) {
    const options = {
      thread_id: secret_path,
      location: "5" /* DELETE_SECTION */,
      section_id
    };
    return this.editDocument(options);
  }
  async editDocument(options) {
    return this.api("/1/threads/edit-document", options);
  }
  async getBlob(path) {
    const url = `/1${path}`;
    const resource = this.buildRequest(url, null);
    const response = await (0, import_obsidian2.requestUrl)(resource);
    const status = response.status;
    if (status >= 400) {
      switch (status) {
        case 401:
          throw new Error("Quip authorization failed");
        case 404:
          throw new Error(`Document not found in Quip: ${url}`);
        default:
          throw new Error(`Quip server error: ${status}: ${response.text}`);
      }
    }
    return new Blob([response.arrayBuffer], {
      type: response.headers["Content-Type"] || "image/png"
    });
  }
  async getRecentThreads() {
    const url = "/1/threads/recent?count=50";
    return this.api(url, null);
  }
  async getThread(thread_id_or_secret_path) {
    const url = `/2/threads/${thread_id_or_secret_path}`;
    return this.api(url, null);
  }
  async newDocument(options) {
    return this.api("/1/threads/new-document", options);
  }
  async searchTitles(query) {
    const url = `/1/threads/search?only_match_titles=true&query=${encodeURIComponent(query)}`;
    return this.api(url, null);
  }
  buildRequest(path, postArguments) {
    const options = {
      url: `https://${this.hostname}${path}`,
      headers: {},
      throw: false
    };
    if (this.accessToken) {
      options.headers["Authorization"] = `Bearer ${this.accessToken}`;
    }
    if (postArguments) {
      options.method = "POST" /* POST */;
      options.body = new URLSearchParams(postArguments).toString();
      options.contentType = "application/x-www-form-urlencoded";
    }
    return options;
  }
  async api(path, postArguments) {
    const resource = this.buildRequest(path, postArguments);
    const response = (0, import_obsidian2.requestUrl)(resource);
    const status = (await response).status;
    if (status >= 400) {
      switch (status) {
        case 401:
          throw new Error("Quip authorization failed");
        case 404:
          throw new Error(`Document not found in Quip: ${path}`);
        default:
          throw new Error(`Quip server error: ${status}: ${await response.text}`);
      }
    }
    return response.json;
  }
};

// src/renderer.ts
var import_obsidian3 = require("obsidian");
var mimeTypeTable = {
  bmp: "image/x-ms-bmp",
  gif: "image/gif",
  jpeg: "image/jpeg",
  jpg: "image/jpeg",
  png: "image/png",
  svg: "image/svg+xml",
  tif: "image/tiff",
  tiff: "image/tiff",
  webp: "image/webp"
};
async function postProcessRenderedHTML(plugin, inputFile, wrapper, parentFiles = []) {
  var _a;
  const vault = plugin.app.vault;
  for (const anchor of Array.from(wrapper.querySelectorAll("a.internal-link"))) {
    const link = anchor.getAttribute("data-href");
    const file = plugin.app.metadataCache.getFirstLinkpathDest((0, import_obsidian3.getLinkpath)(link), inputFile.path);
    if (file && file instanceof import_obsidian3.TFile) {
      await plugin.app.fileManager.processFrontMatter(file, (front_matter) => {
        const quip = (0, import_obsidian3.parseFrontMatterEntry)(front_matter, "quip");
        if (quip) {
          anchor.setAttribute("href", quip);
        }
      });
    }
  }
  for (const span of Array.from(wrapper.querySelectorAll('span[src$=".png"], span[src$=".jpg"], span[src$=".gif"], span[src$=".jpeg"]'))) {
    const img = createEl("img", {
      "attr": { "src": span.getAttr("src") },
      "cls": span.className
    });
    span.replaceWith(img);
  }
  if (plugin.settings.inlineEmbeds) {
    for (const span of Array.from(wrapper.querySelectorAll("img.internal-embed"))) {
      const src = span.getAttribute("src");
      if (src) {
        const subfolder = inputFile.parent;
        const file = plugin.app.metadataCache.getFirstLinkpathDest(src, subfolder.path);
        try {
          const bytes = await vault.readBinary(file);
          const type = (_a = mimeTypeTable[file.extension]) != null ? _a : "image/jpeg";
          const encoded = Buffer.from(bytes).toString("base64");
          span.setAttribute("src", `data:${type};base64,${encoded}`);
        } catch (e) {
          console.error("Quip plugin encountered an error trying to load an embedded image: " + e.toString());
        }
      }
    }
    for (const span of Array.from(wrapper.querySelectorAll("span.internal-embed"))) {
      const src = span.getAttribute("src");
      if (src) {
        const subfolder = inputFile.parent;
        const file = plugin.app.metadataCache.getFirstLinkpathDest(src, subfolder.path);
        try {
          if (parentFiles.indexOf(file.path) !== -1) {
            span.outerHTML = `<a href="${file}">${span.innerHTML}</a>`;
          } else {
            const markdown = await vault.read(file);
            const newParentFiles = [...parentFiles];
            newParentFiles.push(inputFile.path);
            const html = await render(plugin, { data: markdown }, file, newParentFiles);
            span.outerHTML = html;
          }
        } catch (e) {
          console.error("Quip plugin encountered an error trying to load an embedded note: " + e.toString());
        }
      }
    }
  }
  if (plugin.settings.removeYAML) {
    Array.from(wrapper.querySelectorAll(".frontmatter, .frontmatter-container")).forEach((el) => wrapper.removeChild(el));
  }
}
async function render(plugin, view, inputFile, parentFiles = []) {
  const markdown = view.data;
  const wrapper = document.createElement("div");
  wrapper.style.display = "hidden";
  document.body.appendChild(wrapper);
  const sourcePath = inputFile.parent.path;
  await import_obsidian3.MarkdownRenderer.renderMarkdown(markdown, wrapper, sourcePath, view);
  await postProcessRenderedHTML(plugin, inputFile, wrapper, parentFiles);
  const html = wrapper.innerHTML;
  document.body.removeChild(wrapper);
  return html;
}

// src/ImportModal.ts
var import_obsidian4 = require("obsidian");
var ImportModal = class extends import_obsidian4.SuggestModal {
  constructor(app, quip, cached_recent, onSubmit) {
    super(app);
    this.quip = quip;
    this.onSubmit = onSubmit;
    this.setPlaceholder("Quip title or URL");
    this.recent = [];
    this.loadRecentThreads(cached_recent);
    this.emptyStateText = "Loading recent documents from Quip";
    this.searching = false;
  }
  async loadRecentThreads(cached_recent) {
    this.recent = await cached_recent;
    this.emptyStateText = "No matching document found";
    if (this.isOpen) {
      this.onInput(this.inputEl.value);
    }
  }
  async loadSearchResults(query) {
    this.searching = true;
    this.searchQuery = query;
    this.searchResults = [];
    for (const thread_response of await this.quip.searchTitles(query)) {
      const thread_info = thread_response.thread;
      this.searchResults.push(thread_info);
    }
    this.searching = false;
    if (this.isOpen) {
      this.onInput(this.inputEl.value);
    }
  }
  getSuggestions(query) {
    if (query) {
      const lower_query = query.toLowerCase();
      const filter = (thread) => thread.link.toLowerCase().contains(lower_query) || (thread == null ? void 0 : thread.title.toLowerCase().contains(lower_query));
      if (this.searchQuery && lower_query.contains(this.searchQuery.toLowerCase())) {
        const filtered_results = this.searchResults.filter(filter);
        if (filtered_results.length > 0) {
          return filtered_results;
        }
      }
      const filtered_recent = this.recent.filter(filter);
      if (filtered_recent.length > 0) {
        return filtered_recent;
      } else {
        if (query && query != this.searchQuery && !this.searching) {
          this.loadSearchResults(query);
        }
        return [{ link: query }];
      }
    } else {
      return this.recent;
    }
  }
  renderSuggestion(thread, el) {
    el.createEl("div", { text: thread.title });
    el.createEl("small", { text: thread.link });
  }
  onChooseSuggestion(thread, evt) {
    if (thread.link) {
      this.onSubmit(thread.link);
    }
  }
};

// src/SuccessModal.ts
var import_obsidian5 = require("obsidian");
var SuccessModal = class extends import_obsidian5.Modal {
  constructor(app, link, message) {
    super(app);
    this.link = link;
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h3", null, (el) => {
      el.innerText = "Successfully published to ";
      el.createEl("a", null, (anchor) => {
        anchor.href = this.link;
        anchor.innerText = this.link;
      });
    });
    if (this.message) {
      contentEl.createEl("p", null, (el) => {
        el.innerText = this.message;
      });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/Importer.ts
var import_obsidian7 = require("obsidian");

// node_modules/turndown/lib/turndown.browser.es.js
function extend(destination) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (source.hasOwnProperty(key))
        destination[key] = source[key];
    }
  }
  return destination;
}
function repeat(character, count) {
  return Array(count + 1).join(character);
}
function trimLeadingNewlines(string) {
  return string.replace(/^\n*/, "");
}
function trimTrailingNewlines(string) {
  var indexEnd = string.length;
  while (indexEnd > 0 && string[indexEnd - 1] === "\n")
    indexEnd--;
  return string.substring(0, indexEnd);
}
var blockElements = [
  "ADDRESS",
  "ARTICLE",
  "ASIDE",
  "AUDIO",
  "BLOCKQUOTE",
  "BODY",
  "CANVAS",
  "CENTER",
  "DD",
  "DIR",
  "DIV",
  "DL",
  "DT",
  "FIELDSET",
  "FIGCAPTION",
  "FIGURE",
  "FOOTER",
  "FORM",
  "FRAMESET",
  "H1",
  "H2",
  "H3",
  "H4",
  "H5",
  "H6",
  "HEADER",
  "HGROUP",
  "HR",
  "HTML",
  "ISINDEX",
  "LI",
  "MAIN",
  "MENU",
  "NAV",
  "NOFRAMES",
  "NOSCRIPT",
  "OL",
  "OUTPUT",
  "P",
  "PRE",
  "SECTION",
  "TABLE",
  "TBODY",
  "TD",
  "TFOOT",
  "TH",
  "THEAD",
  "TR",
  "UL"
];
function isBlock(node) {
  return is(node, blockElements);
}
var voidElements = [
  "AREA",
  "BASE",
  "BR",
  "COL",
  "COMMAND",
  "EMBED",
  "HR",
  "IMG",
  "INPUT",
  "KEYGEN",
  "LINK",
  "META",
  "PARAM",
  "SOURCE",
  "TRACK",
  "WBR"
];
function isVoid(node) {
  return is(node, voidElements);
}
function hasVoid(node) {
  return has(node, voidElements);
}
var meaningfulWhenBlankElements = [
  "A",
  "TABLE",
  "THEAD",
  "TBODY",
  "TFOOT",
  "TH",
  "TD",
  "IFRAME",
  "SCRIPT",
  "AUDIO",
  "VIDEO"
];
function isMeaningfulWhenBlank(node) {
  return is(node, meaningfulWhenBlankElements);
}
function hasMeaningfulWhenBlank(node) {
  return has(node, meaningfulWhenBlankElements);
}
function is(node, tagNames) {
  return tagNames.indexOf(node.nodeName) >= 0;
}
function has(node, tagNames) {
  return node.getElementsByTagName && tagNames.some(function(tagName) {
    return node.getElementsByTagName(tagName).length;
  });
}
var rules = {};
rules.paragraph = {
  filter: "p",
  replacement: function(content) {
    return "\n\n" + content + "\n\n";
  }
};
rules.lineBreak = {
  filter: "br",
  replacement: function(content, node, options) {
    return options.br + "\n";
  }
};
rules.heading = {
  filter: ["h1", "h2", "h3", "h4", "h5", "h6"],
  replacement: function(content, node, options) {
    var hLevel = Number(node.nodeName.charAt(1));
    if (options.headingStyle === "setext" && hLevel < 3) {
      var underline = repeat(hLevel === 1 ? "=" : "-", content.length);
      return "\n\n" + content + "\n" + underline + "\n\n";
    } else {
      return "\n\n" + repeat("#", hLevel) + " " + content + "\n\n";
    }
  }
};
rules.blockquote = {
  filter: "blockquote",
  replacement: function(content) {
    content = content.replace(/^\n+|\n+$/g, "");
    content = content.replace(/^/gm, "> ");
    return "\n\n" + content + "\n\n";
  }
};
rules.list = {
  filter: ["ul", "ol"],
  replacement: function(content, node) {
    var parent = node.parentNode;
    if (parent.nodeName === "LI" && parent.lastElementChild === node) {
      return "\n" + content;
    } else {
      return "\n\n" + content + "\n\n";
    }
  }
};
rules.listItem = {
  filter: "li",
  replacement: function(content, node, options) {
    content = content.replace(/^\n+/, "").replace(/\n+$/, "\n").replace(/\n/gm, "\n    ");
    var prefix = options.bulletListMarker + "   ";
    var parent = node.parentNode;
    if (parent.nodeName === "OL") {
      var start = parent.getAttribute("start");
      var index = Array.prototype.indexOf.call(parent.children, node);
      prefix = (start ? Number(start) + index : index + 1) + ".  ";
    }
    return prefix + content + (node.nextSibling && !/\n$/.test(content) ? "\n" : "");
  }
};
rules.indentedCodeBlock = {
  filter: function(node, options) {
    return options.codeBlockStyle === "indented" && node.nodeName === "PRE" && node.firstChild && node.firstChild.nodeName === "CODE";
  },
  replacement: function(content, node, options) {
    return "\n\n    " + node.firstChild.textContent.replace(/\n/g, "\n    ") + "\n\n";
  }
};
rules.fencedCodeBlock = {
  filter: function(node, options) {
    return options.codeBlockStyle === "fenced" && node.nodeName === "PRE" && node.firstChild && node.firstChild.nodeName === "CODE";
  },
  replacement: function(content, node, options) {
    var className = node.firstChild.getAttribute("class") || "";
    var language = (className.match(/language-(\S+)/) || [null, ""])[1];
    var code = node.firstChild.textContent;
    var fenceChar = options.fence.charAt(0);
    var fenceSize = 3;
    var fenceInCodeRegex = new RegExp("^" + fenceChar + "{3,}", "gm");
    var match;
    while (match = fenceInCodeRegex.exec(code)) {
      if (match[0].length >= fenceSize) {
        fenceSize = match[0].length + 1;
      }
    }
    var fence = repeat(fenceChar, fenceSize);
    return "\n\n" + fence + language + "\n" + code.replace(/\n$/, "") + "\n" + fence + "\n\n";
  }
};
rules.horizontalRule = {
  filter: "hr",
  replacement: function(content, node, options) {
    return "\n\n" + options.hr + "\n\n";
  }
};
rules.inlineLink = {
  filter: function(node, options) {
    return options.linkStyle === "inlined" && node.nodeName === "A" && node.getAttribute("href");
  },
  replacement: function(content, node) {
    var href = node.getAttribute("href");
    var title = cleanAttribute(node.getAttribute("title"));
    if (title)
      title = ' "' + title + '"';
    return "[" + content + "](" + href + title + ")";
  }
};
rules.referenceLink = {
  filter: function(node, options) {
    return options.linkStyle === "referenced" && node.nodeName === "A" && node.getAttribute("href");
  },
  replacement: function(content, node, options) {
    var href = node.getAttribute("href");
    var title = cleanAttribute(node.getAttribute("title"));
    if (title)
      title = ' "' + title + '"';
    var replacement;
    var reference;
    switch (options.linkReferenceStyle) {
      case "collapsed":
        replacement = "[" + content + "][]";
        reference = "[" + content + "]: " + href + title;
        break;
      case "shortcut":
        replacement = "[" + content + "]";
        reference = "[" + content + "]: " + href + title;
        break;
      default:
        var id = this.references.length + 1;
        replacement = "[" + content + "][" + id + "]";
        reference = "[" + id + "]: " + href + title;
    }
    this.references.push(reference);
    return replacement;
  },
  references: [],
  append: function(options) {
    var references = "";
    if (this.references.length) {
      references = "\n\n" + this.references.join("\n") + "\n\n";
      this.references = [];
    }
    return references;
  }
};
rules.emphasis = {
  filter: ["em", "i"],
  replacement: function(content, node, options) {
    if (!content.trim())
      return "";
    return options.emDelimiter + content + options.emDelimiter;
  }
};
rules.strong = {
  filter: ["strong", "b"],
  replacement: function(content, node, options) {
    if (!content.trim())
      return "";
    return options.strongDelimiter + content + options.strongDelimiter;
  }
};
rules.code = {
  filter: function(node) {
    var hasSiblings = node.previousSibling || node.nextSibling;
    var isCodeBlock = node.parentNode.nodeName === "PRE" && !hasSiblings;
    return node.nodeName === "CODE" && !isCodeBlock;
  },
  replacement: function(content) {
    if (!content)
      return "";
    content = content.replace(/\r?\n|\r/g, " ");
    var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? " " : "";
    var delimiter = "`";
    var matches = content.match(/`+/gm) || [];
    while (matches.indexOf(delimiter) !== -1)
      delimiter = delimiter + "`";
    return delimiter + extraSpace + content + extraSpace + delimiter;
  }
};
rules.image = {
  filter: "img",
  replacement: function(content, node) {
    var alt = cleanAttribute(node.getAttribute("alt"));
    var src = node.getAttribute("src") || "";
    var title = cleanAttribute(node.getAttribute("title"));
    var titlePart = title ? ' "' + title + '"' : "";
    return src ? "![" + alt + "](" + src + titlePart + ")" : "";
  }
};
function cleanAttribute(attribute) {
  return attribute ? attribute.replace(/(\n+\s*)+/g, "\n") : "";
}
function Rules(options) {
  this.options = options;
  this._keep = [];
  this._remove = [];
  this.blankRule = {
    replacement: options.blankReplacement
  };
  this.keepReplacement = options.keepReplacement;
  this.defaultRule = {
    replacement: options.defaultReplacement
  };
  this.array = [];
  for (var key in options.rules)
    this.array.push(options.rules[key]);
}
Rules.prototype = {
  add: function(key, rule) {
    this.array.unshift(rule);
  },
  keep: function(filter) {
    this._keep.unshift({
      filter,
      replacement: this.keepReplacement
    });
  },
  remove: function(filter) {
    this._remove.unshift({
      filter,
      replacement: function() {
        return "";
      }
    });
  },
  forNode: function(node) {
    if (node.isBlank)
      return this.blankRule;
    var rule;
    if (rule = findRule(this.array, node, this.options))
      return rule;
    if (rule = findRule(this._keep, node, this.options))
      return rule;
    if (rule = findRule(this._remove, node, this.options))
      return rule;
    return this.defaultRule;
  },
  forEach: function(fn) {
    for (var i = 0; i < this.array.length; i++)
      fn(this.array[i], i);
  }
};
function findRule(rules3, node, options) {
  for (var i = 0; i < rules3.length; i++) {
    var rule = rules3[i];
    if (filterValue(rule, node, options))
      return rule;
  }
  return void 0;
}
function filterValue(rule, node, options) {
  var filter = rule.filter;
  if (typeof filter === "string") {
    if (filter === node.nodeName.toLowerCase())
      return true;
  } else if (Array.isArray(filter)) {
    if (filter.indexOf(node.nodeName.toLowerCase()) > -1)
      return true;
  } else if (typeof filter === "function") {
    if (filter.call(rule, node, options))
      return true;
  } else {
    throw new TypeError("`filter` needs to be a string, array, or function");
  }
}
function collapseWhitespace(options) {
  var element = options.element;
  var isBlock2 = options.isBlock;
  var isVoid2 = options.isVoid;
  var isPre = options.isPre || function(node2) {
    return node2.nodeName === "PRE";
  };
  if (!element.firstChild || isPre(element))
    return;
  var prevText = null;
  var keepLeadingWs = false;
  var prev = null;
  var node = next(prev, element, isPre);
  while (node !== element) {
    if (node.nodeType === 3 || node.nodeType === 4) {
      var text = node.data.replace(/[ \r\n\t]+/g, " ");
      if ((!prevText || / $/.test(prevText.data)) && !keepLeadingWs && text[0] === " ") {
        text = text.substr(1);
      }
      if (!text) {
        node = remove(node);
        continue;
      }
      node.data = text;
      prevText = node;
    } else if (node.nodeType === 1) {
      if (isBlock2(node) || node.nodeName === "BR") {
        if (prevText) {
          prevText.data = prevText.data.replace(/ $/, "");
        }
        prevText = null;
        keepLeadingWs = false;
      } else if (isVoid2(node) || isPre(node)) {
        prevText = null;
        keepLeadingWs = true;
      } else if (prevText) {
        keepLeadingWs = false;
      }
    } else {
      node = remove(node);
      continue;
    }
    var nextNode = next(prev, node, isPre);
    prev = node;
    node = nextNode;
  }
  if (prevText) {
    prevText.data = prevText.data.replace(/ $/, "");
    if (!prevText.data) {
      remove(prevText);
    }
  }
}
function remove(node) {
  var next2 = node.nextSibling || node.parentNode;
  node.parentNode.removeChild(node);
  return next2;
}
function next(prev, current, isPre) {
  if (prev && prev.parentNode === current || isPre(current)) {
    return current.nextSibling || current.parentNode;
  }
  return current.firstChild || current.nextSibling || current.parentNode;
}
var root = typeof window !== "undefined" ? window : {};
function canParseHTMLNatively() {
  var Parser = root.DOMParser;
  var canParse = false;
  try {
    if (new Parser().parseFromString("", "text/html")) {
      canParse = true;
    }
  } catch (e) {
  }
  return canParse;
}
function createHTMLParser() {
  var Parser = function() {
  };
  {
    if (shouldUseActiveX()) {
      Parser.prototype.parseFromString = function(string) {
        var doc = new window.ActiveXObject("htmlfile");
        doc.designMode = "on";
        doc.open();
        doc.write(string);
        doc.close();
        return doc;
      };
    } else {
      Parser.prototype.parseFromString = function(string) {
        var doc = document.implementation.createHTMLDocument("");
        doc.open();
        doc.write(string);
        doc.close();
        return doc;
      };
    }
  }
  return Parser;
}
function shouldUseActiveX() {
  var useActiveX = false;
  try {
    document.implementation.createHTMLDocument("").open();
  } catch (e) {
    if (window.ActiveXObject)
      useActiveX = true;
  }
  return useActiveX;
}
var HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();
function RootNode(input, options) {
  var root2;
  if (typeof input === "string") {
    var doc = htmlParser().parseFromString('<x-turndown id="turndown-root">' + input + "</x-turndown>", "text/html");
    root2 = doc.getElementById("turndown-root");
  } else {
    root2 = input.cloneNode(true);
  }
  collapseWhitespace({
    element: root2,
    isBlock,
    isVoid,
    isPre: options.preformattedCode ? isPreOrCode : null
  });
  return root2;
}
var _htmlParser;
function htmlParser() {
  _htmlParser = _htmlParser || new HTMLParser();
  return _htmlParser;
}
function isPreOrCode(node) {
  return node.nodeName === "PRE" || node.nodeName === "CODE";
}
function Node(node, options) {
  node.isBlock = isBlock(node);
  node.isCode = node.nodeName === "CODE" || node.parentNode.isCode;
  node.isBlank = isBlank(node);
  node.flankingWhitespace = flankingWhitespace(node, options);
  return node;
}
function isBlank(node) {
  return !isVoid(node) && !isMeaningfulWhenBlank(node) && /^\s*$/i.test(node.textContent) && !hasVoid(node) && !hasMeaningfulWhenBlank(node);
}
function flankingWhitespace(node, options) {
  if (node.isBlock || options.preformattedCode && node.isCode) {
    return { leading: "", trailing: "" };
  }
  var edges = edgeWhitespace(node.textContent);
  if (edges.leadingAscii && isFlankedByWhitespace("left", node, options)) {
    edges.leading = edges.leadingNonAscii;
  }
  if (edges.trailingAscii && isFlankedByWhitespace("right", node, options)) {
    edges.trailing = edges.trailingNonAscii;
  }
  return { leading: edges.leading, trailing: edges.trailing };
}
function edgeWhitespace(string) {
  var m = string.match(/^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/);
  return {
    leading: m[1],
    leadingAscii: m[2],
    leadingNonAscii: m[3],
    trailing: m[4],
    trailingNonAscii: m[5],
    trailingAscii: m[6]
  };
}
function isFlankedByWhitespace(side, node, options) {
  var sibling;
  var regExp;
  var isFlanked;
  if (side === "left") {
    sibling = node.previousSibling;
    regExp = / $/;
  } else {
    sibling = node.nextSibling;
    regExp = /^ /;
  }
  if (sibling) {
    if (sibling.nodeType === 3) {
      isFlanked = regExp.test(sibling.nodeValue);
    } else if (options.preformattedCode && sibling.nodeName === "CODE") {
      isFlanked = false;
    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {
      isFlanked = regExp.test(sibling.textContent);
    }
  }
  return isFlanked;
}
var reduce = Array.prototype.reduce;
var escapes = [
  [/\\/g, "\\\\"],
  [/\*/g, "\\*"],
  [/^-/g, "\\-"],
  [/^\+ /g, "\\+ "],
  [/^(=+)/g, "\\$1"],
  [/^(#{1,6}) /g, "\\$1 "],
  [/`/g, "\\`"],
  [/^~~~/g, "\\~~~"],
  [/\[/g, "\\["],
  [/\]/g, "\\]"],
  [/^>/g, "\\>"],
  [/_/g, "\\_"],
  [/^(\d+)\. /g, "$1\\. "]
];
function TurndownService(options) {
  if (!(this instanceof TurndownService))
    return new TurndownService(options);
  var defaults = {
    rules,
    headingStyle: "setext",
    hr: "* * *",
    bulletListMarker: "*",
    codeBlockStyle: "indented",
    fence: "```",
    emDelimiter: "_",
    strongDelimiter: "**",
    linkStyle: "inlined",
    linkReferenceStyle: "full",
    br: "  ",
    preformattedCode: false,
    blankReplacement: function(content, node) {
      return node.isBlock ? "\n\n" : "";
    },
    keepReplacement: function(content, node) {
      return node.isBlock ? "\n\n" + node.outerHTML + "\n\n" : node.outerHTML;
    },
    defaultReplacement: function(content, node) {
      return node.isBlock ? "\n\n" + content + "\n\n" : content;
    }
  };
  this.options = extend({}, defaults, options);
  this.rules = new Rules(this.options);
}
TurndownService.prototype = {
  turndown: function(input) {
    if (!canConvert(input)) {
      throw new TypeError(input + " is not a string, or an element/document/fragment node.");
    }
    if (input === "")
      return "";
    var output = process.call(this, new RootNode(input, this.options));
    return postProcess.call(this, output);
  },
  use: function(plugin) {
    if (Array.isArray(plugin)) {
      for (var i = 0; i < plugin.length; i++)
        this.use(plugin[i]);
    } else if (typeof plugin === "function") {
      plugin(this);
    } else {
      throw new TypeError("plugin must be a Function or an Array of Functions");
    }
    return this;
  },
  addRule: function(key, rule) {
    this.rules.add(key, rule);
    return this;
  },
  keep: function(filter) {
    this.rules.keep(filter);
    return this;
  },
  remove: function(filter) {
    this.rules.remove(filter);
    return this;
  },
  escape: function(string) {
    return escapes.reduce(function(accumulator, escape) {
      return accumulator.replace(escape[0], escape[1]);
    }, string);
  }
};
function process(parentNode) {
  var self = this;
  return reduce.call(parentNode.childNodes, function(output, node) {
    node = new Node(node, self.options);
    var replacement = "";
    if (node.nodeType === 3) {
      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);
    } else if (node.nodeType === 1) {
      replacement = replacementForNode.call(self, node);
    }
    return join(output, replacement);
  }, "");
}
function postProcess(output) {
  var self = this;
  this.rules.forEach(function(rule) {
    if (typeof rule.append === "function") {
      output = join(output, rule.append(self.options));
    }
  });
  return output.replace(/^[\t\r\n]+/, "").replace(/[\t\r\n\s]+$/, "");
}
function replacementForNode(node) {
  var rule = this.rules.forNode(node);
  var content = process.call(this, node);
  var whitespace = node.flankingWhitespace;
  if (whitespace.leading || whitespace.trailing)
    content = content.trim();
  return whitespace.leading + rule.replacement(content, node, this.options) + whitespace.trailing;
}
function join(output, replacement) {
  var s1 = trimTrailingNewlines(output);
  var s2 = trimLeadingNewlines(replacement);
  var nls = Math.max(output.length - s1.length, replacement.length - s2.length);
  var separator = "\n\n".substring(0, nls);
  return s1 + separator + s2;
}
function canConvert(input) {
  return input != null && (typeof input === "string" || input.nodeType && (input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11));
}
var turndown_browser_es_default = TurndownService;

// node_modules/turndown-plugin-gfm/lib/turndown-plugin-gfm.es.js
var highlightRegExp = /highlight-(?:text|source)-([a-z0-9]+)/;
function highlightedCodeBlock(turndownService) {
  turndownService.addRule("highlightedCodeBlock", {
    filter: function(node) {
      var firstChild = node.firstChild;
      return node.nodeName === "DIV" && highlightRegExp.test(node.className) && firstChild && firstChild.nodeName === "PRE";
    },
    replacement: function(content, node, options) {
      var className = node.className || "";
      var language = (className.match(highlightRegExp) || [null, ""])[1];
      return "\n\n" + options.fence + language + "\n" + node.firstChild.textContent + "\n" + options.fence + "\n\n";
    }
  });
}
function strikethrough(turndownService) {
  turndownService.addRule("strikethrough", {
    filter: ["del", "s", "strike"],
    replacement: function(content) {
      return "~" + content + "~";
    }
  });
}
var indexOf = Array.prototype.indexOf;
var every = Array.prototype.every;
var rules2 = {};
rules2.tableCell = {
  filter: ["th", "td"],
  replacement: function(content, node) {
    return cell(content, node);
  }
};
rules2.tableRow = {
  filter: "tr",
  replacement: function(content, node) {
    var borderCells = "";
    var alignMap = { left: ":--", right: "--:", center: ":-:" };
    if (isHeadingRow(node)) {
      for (var i = 0; i < node.childNodes.length; i++) {
        var border = "---";
        var align = (node.childNodes[i].getAttribute("align") || "").toLowerCase();
        if (align)
          border = alignMap[align] || border;
        borderCells += cell(border, node.childNodes[i]);
      }
    }
    return "\n" + content + (borderCells ? "\n" + borderCells : "");
  }
};
rules2.table = {
  filter: function(node) {
    return node.nodeName === "TABLE" && isHeadingRow(node.rows[0]);
  },
  replacement: function(content) {
    content = content.replace("\n\n", "\n");
    return "\n\n" + content + "\n\n";
  }
};
rules2.tableSection = {
  filter: ["thead", "tbody", "tfoot"],
  replacement: function(content) {
    return content;
  }
};
function isHeadingRow(tr) {
  var parentNode = tr.parentNode;
  return parentNode.nodeName === "THEAD" || parentNode.firstChild === tr && (parentNode.nodeName === "TABLE" || isFirstTbody(parentNode)) && every.call(tr.childNodes, function(n) {
    return n.nodeName === "TH";
  });
}
function isFirstTbody(element) {
  var previousSibling = element.previousSibling;
  return element.nodeName === "TBODY" && (!previousSibling || previousSibling.nodeName === "THEAD" && /^\s*$/i.test(previousSibling.textContent));
}
function cell(content, node) {
  var index = indexOf.call(node.parentNode.childNodes, node);
  var prefix = " ";
  if (index === 0)
    prefix = "| ";
  return prefix + content + " |";
}
function tables(turndownService) {
  turndownService.keep(function(node) {
    return node.nodeName === "TABLE" && !isHeadingRow(node.rows[0]);
  });
  for (var key in rules2)
    turndownService.addRule(key, rules2[key]);
}
function taskListItems(turndownService) {
  turndownService.addRule("taskListItems", {
    filter: function(node) {
      return node.type === "checkbox" && node.parentNode.nodeName === "LI";
    },
    replacement: function(content, node) {
      return (node.checked ? "[x]" : "[ ]") + " ";
    }
  });
}
function gfm(turndownService) {
  turndownService.use([
    highlightedCodeBlock,
    strikethrough,
    tables,
    taskListItems
  ]);
}

// src/AppHelper.ts
var import_obsidian6 = require("obsidian");
var AppHelper = class {
  constructor(app) {
    this.app = app;
    this.vault = app.vault;
  }
  async createOrModifyBinary(filename_base, blob) {
    const parent = this.getParentFolder();
    const type = blob.type;
    let extension = type.split("image/", 2).at(1);
    if (extension == "svg+xml") {
      extension = "svg";
    }
    const filename = `${filename_base}.${extension}`;
    const filepath = (0, import_obsidian6.normalizePath)(`${parent.path}/${filename}`);
    const file = this.vault.getAbstractFileByPath(filepath);
    if (file && file instanceof import_obsidian6.TFile) {
      this.vault.modifyBinary(file, await blob.arrayBuffer());
    } else {
      this.vault.createBinary(filepath, await blob.arrayBuffer());
    }
    return filename;
  }
  async createOrModifyNote(title, markdown, front_matter) {
    const parent = this.getParentFolder();
    const filename = (0, import_obsidian6.normalizePath)(`${parent.path}/${title}.md`);
    const file_content = `---
${(0, import_obsidian6.stringifyYaml)(front_matter)}
---
${markdown}`;
    const file = this.vault.getAbstractFileByPath(filename);
    if (file && file instanceof import_obsidian6.TFile) {
      this.vault.modify(file, file_content);
      return file;
    } else {
      return this.vault.create(filename, file_content);
    }
  }
  async getNoteByTitle(title) {
    return this.app.metadataCache.getFirstLinkpathDest((0, import_obsidian6.getLinkpath)(title), this.app.vault.getRoot().path);
  }
  getParentFolder() {
    const active_file = this.app.workspace.getActiveFile();
    let parent = this.vault.getRoot();
    if (active_file) {
      parent = this.app.fileManager.getNewFileParent(active_file.path);
    }
    return parent;
  }
  async updateNote(file, markdown, new_front_matter) {
    const cached_front_matter = this.app.metadataCache.getFileCache(file).frontmatter;
    const front_matter = { ...cached_front_matter, ...new_front_matter };
    delete front_matter.position;
    const file_content = `---
${(0, import_obsidian6.stringifyYaml)(front_matter)}
---
${markdown}`;
    return this.vault.modify(file, file_content);
  }
};

// src/Importer.ts
var Importer = class {
  constructor(plugin) {
    this.hostname = plugin.settings.hostname;
    this.client = new QuipAPIClient(plugin.settings.hostname, plugin.settings.token);
    this.td = new turndown_browser_es_default({
      headingStyle: "atx",
      hr: "***",
      bulletListMarker: "-",
      codeBlockStyle: "fenced"
    });
    this.td.use(gfm);
    this.app = plugin.app;
    this.helper = new AppHelper(plugin.app);
  }
  async process_A(anchor) {
    const href = anchor.getAttribute("href");
    if (href && this.hostname.contains(new URL(href).hostname)) {
      const secret_path = href.split(".com/", 2).at(1).split("/").at(0);
      const title = anchor.innerText;
      const file = await this.helper.getNoteByTitle(title);
      if (file) {
        const frontmatter = this.app.metadataCache.getCache(file.path).frontmatter;
        if (frontmatter) {
          const quip = (0, import_obsidian7.parseFrontMatterEntry)(frontmatter, "quip");
          if (quip && quip.contains(secret_path)) {
            anchor.setAttribute("href", encodeURIComponent(file.path));
          }
        }
      }
    }
  }
  async process_IMG(img, info) {
    const src = img.getAttribute("src");
    if (src) {
      const blob = await this.client.getBlob(src);
      const filename_base = `${info.title.replaceAll(" ", "_")}${src.replaceAll("/", "-")}`;
      const filename = await this.helper.createOrModifyBinary(filename_base, blob);
      img.setAttribute("src", filename);
    }
  }
  async importHTML(url, active_file) {
    const secret_path = url.split(".com/", 2).at(1).split("/").at(0);
    const html = await this.client.getDocumentHTML(secret_path);
    const info = (await this.client.getThread(secret_path)).thread;
    const fragment = (0, import_obsidian7.sanitizeHTMLToDom)(html);
    for (const anchor of Array.from(fragment.querySelectorAll("a"))) {
      await this.process_A(anchor);
    }
    for (const img of Array.from(fragment.querySelectorAll("img"))) {
      await this.process_IMG(img, info);
    }
    const markdown = this.td.turndown(fragment);
    const front_matter = {
      title: info.title,
      quip: url,
      quip_thread_imported: {
        id: info.id,
        updated_usec: 0,
        updated_datetime: ""
      }
    };
    if (info.updated_usec) {
      front_matter.quip_thread_imported.updated_usec = info.updated_usec;
      front_matter.quip_thread_imported.updated_datetime = new Date(info.updated_usec / 1e3).toLocaleString();
    }
    if (typeof active_file === "undefined") {
      const file = this.helper.createOrModifyNote(info.title, markdown, front_matter);
      this.app.workspace.getLeaf("tab").openFile(await file);
    } else {
      this.helper.updateNote(active_file, markdown, front_matter);
    }
  }
};

// src/main.ts
var QuipPlugin = class extends import_obsidian8.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "publish-html",
      name: "Publish as new Quip document",
      checkCallback: (checking) => {
        var _a;
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
        if (markdownView) {
          if (!checking) {
            let title = null;
            if (this.settings.prependTitle) {
              const file = this.app.workspace.getActiveFile();
              title = ((_a = this.app.metadataCache.getFileCache(file).frontmatter) == null ? void 0 : _a.title) || file.basename;
            }
            this.publishHTML(markdownView, title);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "update-html",
      name: "Update existing Quip document",
      checkCallback: (checking) => {
        var _a;
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
        if (markdownView) {
          const link = (_a = this.app.metadataCache.getFileCache(this.app.workspace.getActiveFile()).frontmatter) == null ? void 0 : _a.quip;
          if (link) {
            if (!checking && link) {
              this.updateHTML(link, markdownView);
            }
            return true;
          }
        }
        return false;
      }
    });
    this.addCommand({
      id: "import",
      name: "Import Quip document",
      callback: () => {
        try {
          const client = new QuipAPIClient(this.settings.hostname, this.settings.token);
          const modal = new ImportModal(this.app, client, this.cached_recent_threads, (url) => {
            new Importer(this).importHTML(url);
          });
          modal.open();
        } catch (error) {
          console.error(error);
          const text = error.message || JSON.stringify(error.info);
          new import_obsidian8.Notice(text);
        }
      }
    });
    this.addCommand({
      id: "refresh",
      name: "Refresh note from Quip document",
      checkCallback: (checking) => {
        var _a;
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
        if (markdownView) {
          const link = (_a = this.app.metadataCache.getFileCache(this.app.workspace.getActiveFile()).frontmatter) == null ? void 0 : _a.quip;
          if (link) {
            if (!checking && link) {
              new Importer(this).importHTML(link, this.app.workspace.getActiveFile());
            }
            return true;
          }
        }
        return false;
      }
    });
    this.addSettingTab(new QuipSettingTab(this.app, this));
  }
  async publishHTML(markdownView, title) {
    let html = await render(this, markdownView, this.app.workspace.getActiveFile());
    if (title) {
      html = `<h1>${title}</h1>${html}`;
    }
    new import_obsidian8.Notice(`Publishing to ${this.settings.hostname}...`);
    try {
      const client = new QuipAPIClient(this.settings.hostname, this.settings.token);
      const response = await client.newHTMLDocument(html, title);
      this.onSuccessfulPublish(response.thread.link);
    } catch (error) {
      console.error(error);
      const text = error.message || JSON.stringify(error.info);
      new import_obsidian8.Notice(text);
    }
  }
  async updateHTML(link, markdownView) {
    const html = await render(this, markdownView, this.app.workspace.getActiveFile());
    new import_obsidian8.Notice(`Publishing to ${this.settings.hostname}...`);
    try {
      const client = new QuipAPIClient(this.settings.hostname, this.settings.token);
      await client.updateHTMLDocument(link, html);
      new SuccessModal(this.app, link, `If your Quip document hasn't updated yet, try refreshing.`).open();
    } catch (error) {
      console.error("Failure invoking Quip APIs", error);
      console.dir(error);
      const text = error.message || JSON.stringify(error.info);
      new import_obsidian8.Notice(text);
    }
  }
  onSuccessfulPublish(link) {
    if (this.settings.addLink) {
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian8.MarkdownView);
      this.app.fileManager.processFrontMatter(markdownView.file, (frontMatter) => {
        frontMatter.quip = link;
      });
    }
    new SuccessModal(this.app, link).open();
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.cached_recent_threads = this.tryPreload();
  }
  async saveSettings() {
    this.cached_recent_threads = this.tryPreload();
    await this.saveData(this.settings);
  }
  async tryPreload() {
    const recent = [];
    try {
      const client = new QuipAPIClient(this.settings.hostname, this.settings.token);
      for (const [thread_id, thread_response] of Object.entries(await client.getRecentThreads())) {
        const thread_info = thread_response.thread;
        recent.push(thread_info);
      }
    } catch (error) {
      console.error(error);
    }
    return recent;
  }
};
//# sourceMappingURL=data:application/json;base64,
